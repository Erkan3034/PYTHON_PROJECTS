"""
# "Finansal GÃ¶sterge Paneli"
# Bu proje, Dolar, Euro, AltÄ±n, BIST 100, GBP ve CHF gibi finansal verileri gerÃ§ek zamanlÄ± olarak takip etmenizi saÄŸlar.
# KullanÄ±cÄ±lar, dÃ¶viz kurlarÄ±nÄ± arayabilir, dÃ¶viz Ã§evirici ile TRY cinsinden hesaplamalar yapabilir ve portfÃ¶ylerini deÄŸerlendirebilir.
# Veriler, doviz.com sitesinden Ã§ekilir ve zaman iÃ§indeki deÄŸiÅŸim grafikleri oluÅŸturulur.
# Streamlit ile geliÅŸtirilen bu uygulama, kullanÄ±cÄ± dostu bir arayÃ¼z sunar ve mobil uyumludur.
# GeliÅŸtirici: ERKAN TURGUT, 2025

"""
import requests
from bs4 import BeautifulSoup
import streamlit as st
import time
import plotly.express as px
import pandas as pd
import sqlite3
from datetime import datetime

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(page_title="Finansal GÃ¶sterge Paneli", page_icon="ğŸ’°", layout="centered",
                   initial_sidebar_state="auto")

# Responsive CSS
st.markdown("""
    <style>
    .main {
        background-color: #f0f2f6;
        font-family: 'Arial', sans-serif;
        padding: 10px;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 10px;
        padding: 8px 16px;
        font-size: clamp(14px, 2.5vw, 16px);
        width: 100%;
        margin: 5px 0;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .metric-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin: 10px 0;
        width: 100%;
    }
    .metric-label {
        font-size: clamp(16px, 3vw, 18px);
        font-weight: bold;
        color: #333;
    }
    .metric-value {
        font-size: clamp(20px, 4vw, 24px);
        color: #4CAF50;
    }
    .change-up {
        color: #28a745;
        font-size: clamp(12px, 2vw, 14px);
    }
    .change-down {
        color: #dc3545;
        font-size: clamp(12px, 2vw, 14px);
    }
    /* Header stilleri */
    .header {
        background-color: #2c3e50;
        color: white;
        padding: 20px;
        text-align: center;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .header h1 {
        font-size: clamp(24px, 6vw, 36px);
        margin: 0;
        font-weight: 700;
    }
    .header p {
        font-size: clamp(14px, 3vw, 16px);
        margin: 5px 0 0;
    }
    /* BaÅŸlÄ±k stilleri */
    h2 {
        font-size: clamp(18px, 4vw, 24px);
        color: #34495e;
        text-align: left;
        margin: 15px 0;
        font-weight: 600;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 5px;
    }
    /* Arama Ã§ubuÄŸu stilleri */
    .search-bar {
        margin: 20px 0;
        text-align: center;
    }
    .search-bar input {
        padding: 10px;
        font-size: clamp(14px, 2.5vw, 16px);
        border-radius: 5px;
        border: 1px solid #ccc;
        width: 100%;
        max-width: 400px;
    }
    /* Footer stilleri */
    .footer {
        background-color: #2c3e50;
        color: white;
        padding: 15px;
        text-align: center;
        border-radius: 10px;
        margin-top: 20px;
        font-size: clamp(12px, 2.5vw, 14px);
    }
    .footer a {
        color: #4CAF50;
        text-decoration: none;
    }
    .footer a:hover {
        text-decoration: underline;
    }
    /* Mobil uyumluluk */
    @media (max-width: 768px) {
        .stColumn > div {
            display: block;
            width: 100%;
        }
        .metric-card {
            margin: 5px 0;
        }
        .stForm {
            padding: 0;
        }
        h2 {
            text-align: center;
            border-bottom: none;
        }
        .header, .footer {
            padding: 15px;
        }
        .search-bar input {
            max-width: 100%;
        }
    }
    </style>
""", unsafe_allow_html=True)

# VeritabanÄ± ve diÄŸer fonksiyonlar
def init_db():
    conn = sqlite3.connect("finansal_veriler.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS veriler (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tarih TEXT,
            usd_try REAL,
            eur_try REAL,
            altin REAL,
            bist_100 REAL
        )
    """)
    conn.commit()
    return conn

def gecmis_verileri_yukle():
    conn = init_db()
    df = pd.read_sql_query("SELECT * FROM veriler ORDER BY tarih DESC", conn)
    conn.close()
    return df

def gecmis_verileri_kaydet(veri):
    conn = init_db()
    c = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute("""
        INSERT INTO veriler (tarih, usd_try, eur_try, altin, bist_100)
        VALUES (?, ?, ?, ?, ?)
    """, (timestamp, veri["USD"], veri["EUR"], veri["AltÄ±n"], veri["BIST 100"]))
    conn.commit()
    conn.close()

def finansal_verileri_cek():
    url = "https://www.doviz.com/"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "html.parser")
        veri = {}
        for key, socket_key in [("USD", "USD"), ("EUR", "EUR"), ("AltÄ±n", "gram-altin"), ("BIST 100", "XU100")]:
            value = soup.find("span", {"data-socket-key": socket_key, "class": "value"})
            change = soup.find("div", {"data-socket-key": socket_key, "class": "change-rate"})
            if value:
                veri[key] = float(value.text.strip().replace(".", "").replace(",", "."))
                veri[f"{key}_change"] = change.text if change else "0%"
            else:
                st.error(f"{key} verisi bulunamadÄ±.")
                return None
        gecmis_verileri_kaydet(veri)
        return veri
    except Exception as e:
        st.error(f"Veri Ã§ekme hatasÄ±: {e}")
        return None

def portfoy_degerini_hesapla(veri, usd_miktar, eur_miktar, altin_miktar, bist_miktar):
    if veri is None:
        return None
    usd_deger = veri["USD"] * usd_miktar
    eur_deger = veri["EUR"] * eur_miktar
    altin_deger = veri["AltÄ±n"] * altin_miktar
    bist_deger = veri["BIST 100"] * bist_miktar / 100
    toplam_deger = usd_deger + eur_deger + altin_deger + bist_deger
    return {
        "USD DeÄŸeri (TRY)": usd_deger,
        "EUR DeÄŸeri (TRY)": eur_deger,
        "AltÄ±n DeÄŸeri (TRY)": altin_deger,
        "BIST 100 DeÄŸeri (TRY)": bist_deger,
        "Toplam PortfÃ¶y DeÄŸeri (TRY)": toplam_deger
    }

def degisim_orani_hesapla(df, column):
    df = df.sort_values(by="tarih")
    df["Degisim_Orani"] = df[column].pct_change() * 100
    return df

# Ana uygulama
def main():
    # Header
    st.markdown("""
        <div class="header">
            <h1>ğŸ’¸ Finansal GÃ¶sterge Paneli</h1>
            <p>Dolar, Euro, AltÄ±n ve BIST 100'Ã¼ gerÃ§ek zamanlÄ± olarak takip edin!</p>
        </div>
    """, unsafe_allow_html=True)

    gecmis_veriler = gecmis_verileri_yukle()

    with st.spinner("ğŸ“Š Veriler yÃ¼kleniyor..."):
        finansal_veri = finansal_verileri_cek()

    if finansal_veri:
        # Arama Ã‡ubuÄŸu
        st.markdown('<div class="search-bar">', unsafe_allow_html=True)
        search_query = st.text_input("", placeholder="DÃ¶viz kuru ara (Ã¶r. USD, EUR, AltÄ±n, BIST 100)...")
        st.markdown('</div>', unsafe_allow_html=True)

        # GÃ¼ncel Piyasa DeÄŸerleri (Arama ile filtrelenmiÅŸ)
        st.markdown('<h2>ğŸ“ˆ GÃ¼ncel Piyasa DeÄŸerleri</h2>', unsafe_allow_html=True)
        available_keys = ["USD", "EUR", "AltÄ±n", "BIST 100"]
        filtered_keys = available_keys

        if search_query:
            search_query = search_query.strip().capitalize()
            filtered_keys = [key for key in available_keys if search_query.lower() in key.lower()]
            if not filtered_keys:
                st.warning(f"'{search_query}' ile eÅŸleÅŸen bir dÃ¶viz kuru bulunamadÄ±.")

        for key in filtered_keys:
            unit = "TRY" if key in ["USD", "EUR"] else "TRY/gram" if key == "AltÄ±n" else "puan"
            change_class = "change-up" if "+" in finansal_veri[f"{key}_change"] else "change-down"
            st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">{key}</div>
                    <div class="metric-value">{finansal_veri[key]:.2f} {unit}</div>
                    <div class="{change_class}">{finansal_veri[f'{key}_change']}</div>
                </div>
            """, unsafe_allow_html=True)

        # DÃ¶viz Ã‡evirici
        st.markdown('<h2>ğŸ’± DÃ¶viz Ã‡evirici</h2>', unsafe_allow_html=True)
        with st.form(key="doviz_cevirici_form"):
            miktar = st.number_input("Miktar", min_value=0.0, value=100.0)
            doviz_turu = st.selectbox("DÃ¶viz TÃ¼rÃ¼", ["USD", "EUR"])
            cevir_button = st.form_submit_button(label="Ã‡evir")
        if cevir_button:
            sonuc = miktar * finansal_veri[doviz_turu]
            st.success(f"{miktar} {doviz_turu} = {sonuc:.2f} TRY")

        # PortfÃ¶y Hesaplama
        st.markdown('<h2>ğŸ’¼ PortfÃ¶yÃ¼nÃ¼zÃ¼ HesaplayÄ±n</h2>', unsafe_allow_html=True)
        with st.form(key="portfoy_form"):
            usd_miktar = st.number_input("USD MiktarÄ±", min_value=0.0, value=100.0)
            eur_miktar = st.number_input("EUR MiktarÄ±", min_value=0.0, value=50.0)
            altin_miktar = st.number_input("AltÄ±n (gram)", min_value=0.0, value=10.0)
            bist_miktar = st.number_input("BIST 100 YatÄ±rÄ±mÄ±", min_value=0.0, value=1000.0)
            submit_button = st.form_submit_button(label="Hesapla")

        if submit_button:
            portfoy = portfoy_degerini_hesapla(finansal_veri, usd_miktar, eur_miktar, altin_miktar, bist_miktar)
            if portfoy:
                st.markdown('<h2>ğŸ“Š PortfÃ¶y DeÄŸerlendirmesi</h2>', unsafe_allow_html=True)
                for key in portfoy:
                    st.write(f"**{key}**: {portfoy[key]:.2f} TRY")
                df = pd.DataFrame({
                    "VarlÄ±k": ["USD", "EUR", "AltÄ±n", "BIST 100"],
                    "DeÄŸer (TRY)": [portfoy[k] for k in ["USD DeÄŸeri (TRY)", "EUR DeÄŸeri (TRY)", "AltÄ±n DeÄŸeri (TRY)", "BIST 100 DeÄŸeri (TRY)"]]
                })
                fig = px.pie(df, values="DeÄŸer (TRY)", names="VarlÄ±k", title="PortfÃ¶y DaÄŸÄ±lÄ±mÄ±")
                st.plotly_chart(fig, use_container_width=True)

        # Grafikler
        st.markdown('<h2>ğŸ“‰ Zaman Ä°Ã§indeki DeÄŸiÅŸim</h2>', unsafe_allow_html=True)
        tabs = st.tabs(["USD/TRY", "EUR/TRY", "AltÄ±n", "BIST 100"])
        for i, (col, title) in enumerate([("usd_try", "USD/TRY"), ("eur_try", "EUR/TRY"), ("altin", "AltÄ±n"), ("bist_100", "BIST 100")]):
            with tabs[i]:
                if not gecmis_veriler.empty:
                    df = degisim_orani_hesapla(gecmis_veriler, col)
                    fig = px.line(df, x="tarih", y=col, title=f"{title} DeÄŸiÅŸimi")
                    fig.update_layout(height=300)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning(f"{title} iÃ§in veri yok.")
        # UyarÄ± Metni (Footer'Ä±n Ã¼stÃ¼ne eklendi)
        st.markdown("""
            <div class="warning-box">
                <p><strong>**Yasal UyarÄ±:** Bu uygulamada sunulan finansal veriler yalnÄ±zca bilgilendirme amaÃ§lÄ±dÄ±r ve kesinlik garanti edilmez. DÃ¶viz kurlarÄ±, altÄ±n, BIST 100 ve diÄŸer veriler gecikmeli olabilir. YatÄ±rÄ±m kararlarÄ±nÄ±zÄ± yalnÄ±zca bu verilere dayanarak almayÄ±n, bir finansal danÄ±ÅŸmana danÄ±ÅŸmanÄ±z Ã¶nerilir. OluÅŸabilecek zararlardan uygulama geliÅŸtiricisi sorumlu deÄŸildir.</p>
            </div>
        """, unsafe_allow_html=True)


    # Footer
    st.markdown("""
        <div class="footer">
            <p>Developed By: KAAN Turgut | Â© 2025 TÃ¼m haklarÄ± saklÄ±dÄ±r.</p>
            <p><a href="mailto:turguterkan55@gmail.com">Ä°letiÅŸim</a> | <a href="https://github.com/Erkan3034">GitHub</a></p>
        </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
